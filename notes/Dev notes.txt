MVP


https://hackhands.com/how-to-get-started-on-the-mean-stack/

http://thecodebarbarian.wordpress.com/2013/04/29/easy-web-prototyping-with-mongodb-and-nodejs/
http://thecodebarbarian.wordpress.com/2013/07/22/introduction-to-the-mean-stack-part-one-setting-up-your-tools/

http://thecodebarbarian.wordpress.com/2013/07/29/introduction-to-the-mean-stack-part-two-building-and-testing-a-to-do-list/

http://scotch.io/bar-talk/setting-up-a-mean-stack-single-page-application



A to-do app.

1. Angular and HTML:
  interface for adding tasks (bar at top) and checking off tasks from list

2. Express/Node: serve up the angular assets upon request to localhost

<note: janky storage could be achieved via fs and JSON.stringify, like we did for Web Historian>

3. Mongo: store tasks in local mongo instance.  use MongooseJS probably.


4. persistence: set up mongo "for real" somewhere; set up to-do app on projects.brianscoles.com

5. authentication: require unique login credentials. salt and hash passwords for storage.

6. accounts: associate tasks with user accounts.

7. rewards: do something cute when tasks are completed.

8. security: give users option to encrypt all tasks (how is reversible encryption keyed? use their password i guess)




get filters working
radio buttons for default priority lvl
push to brianscoles.com
test on monitor


